@page "/identify"

@using System.IO
@using BlazorClient.Data
@using BlazorInputFile
@inject ImageClassificationService ClassificationService

<h1>Identify image</h1>

<p>This component alllows sending an image to run the image recognition model.</p>

@*
Uses the BlazorFileInput component: http://blog.stevensanderson.com/2019/09/13/blazor-inputfile/
Note how the "accept" attribute gets passed to the rendered input HTML element even when not declared explicitly as a parameter by the InputFile component
See: https://docs.microsoft.com/en-us/aspnet/core/blazor/components?view=aspnetcore-3.1#attribute-splatting-and-arbitrary-parameters
*@
<InputFile OnChange="HandleFileSelected" accept="image/*"/>

@if (file != null)
{
    <p>Name: @file.Name</p>
    <p>Size in bytes: @file.Size</p>
    <p>Last modified date: @file.LastModified.ToShortDateString()</p>
    <p>Content type (not always supplied by the browser): @file.Type</p>

    <button class="btn btn-primary" @onclick="ClassifySelectedImage">Classify image</button>

    @if (classifiedImage != null && classifiedImage.Probability > 0.7)
    {
       <strong>Predicted as <em>@classifiedImage.Label</em> with <em>@classifiedImage.Probability</em> probability</strong>
    }
    else if (classifiedImage != null)
    {
       <strong>Best prediction only reached <em>@classifiedImage.Probability</em> probability for <em>@classifiedImage.Label</em></strong>
    }
}

@code {
    IFileListEntry file;
    ClassifiedImage classifiedImage;

    void HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        classifiedImage = null;
    }

    async Task ClassifySelectedImage()
    {
        // Convert BlazorInputFile selected file into a memory stream
        MemoryStream imageMemoryStream = new MemoryStream();
        await file.Data.CopyToAsync(imageMemoryStream);
        // Classify with the classification service that uses the ML.NET model underneath
        classifiedImage = ClassificationService.Classify(imageMemoryStream);
    }
}