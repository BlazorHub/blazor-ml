@using BlazorClient.Data
@inject ImageClassificationService ClassificationService

<div class="card mb-2">
  <div class="card-header">
    @Image.File.Name
  </div>

  @if (Image.Base64Image != null)
  {
    <img src="data:image/png;base64, @Image.Base64Image" class="card-img-top" alt="@Image.File.Name">
  }

  <div class="card-body">
    @if (Image.ClassificationResult != null)
    {
      <p class="card-text">
        @if (Image.ClassificationResult.Probability > 0.7)
        {
          <i class="text-success oi oi-circle-check"></i>
        }
        else
        {
          <i class="text-danger oi oi-warning"></i>
        }
        Classified as <strong>@Image.ClassificationResult.Label</strong> with <strong>@Image.ClassificationResult.Probability</strong> probability
      </p>
      <p class="card-text">
        <button class="btn btn-secondary" @onclick="TriggerOnClear">Clear</button>
      </p>
    }
    else
    {
      <p class="card-text text-center my-2">
        <div class="loader-icon">Loading...</div>
        <span>Loaded @Image.UploadedPercentage.ToString("0")%</span>
      </p>
    }
  </div>
</div>

@code {
    // See Component parameters: https://docs.microsoft.com/en-us/aspnet/core/blazor/components?view=aspnetcore-3.1#component-parameters
    [Parameter]
    public SelectedImage Image { get; set; }

    // See parent-child component event callbacks: https://docs.microsoft.com/en-us/aspnet/core/blazor/components?view=aspnetcore-3.1#eventcallback
    [Parameter]
    public EventCallback<SelectedImage> OnClear { get; set; }

    // See component Lifecycle methods: https://docs.microsoft.com/en-us/aspnet/core/blazor/lifecycle?view=aspnetcore-3.1
    protected override async Task OnInitializedAsync()
    {
        if (Image.ClassificationResult != null) return;

        // Download File contents into a memory stream, so we can hand it over to the ML.NET service
        var fileStream = await Image.Upload(
          // Invoke StateHasChanged while reading data so the UX refreshes showing the upload percentage
          () => InvokeAsync(StateHasChanged)
        );
        // Classify with the classification service that uses the ML.NET model
        Image.ClassificationResult = ClassificationService.Classify(fileStream);
        fileStream.Dispose();
    }

    async Task TriggerOnClear()
    {
        // Trigger parent component callback
        await OnClear.InvokeAsync(Image);
    }
}